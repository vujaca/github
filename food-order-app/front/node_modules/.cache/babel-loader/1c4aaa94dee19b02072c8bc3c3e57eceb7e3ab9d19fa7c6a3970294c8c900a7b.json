{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajko Andjic\\\\Desktop\\\\Repository\\\\github\\\\food-order-app\\\\front\\\\src\\\\pages\\\\AvailableMeals.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n\n// import classes from \"./AvailableMeals.module.css\";\n// import Card from \"../components/UI/Card\";\n// import MealItem from \"../components/Meals/MealItem/MealItem\";\n\n// const AvailableMeals = () => {\n//   const [meals, setMeals] = useState([])\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [httpError, setHttpError] = useState()\n\n//   useEffect(() => {\n//     const fetchMeals = async () => {\n//       const response = await fetch('http://localhost:8080/api/meals')\n\n//       if(!response.ok) {\n//         throw new Error('Somethung went wrong!')\n//       }\n\n//       const responseData = await response.json()\n\n//       const loadedMeals = []\n\n//       for(const key in responseData) {\n//         loadedMeals.push({\n//           id: key,\n//           name: responseData[key].name,\n//           description: responseData[key].description,\n//           price: responseData[key].price\n//         })\n//       }\n\n//       setMeals(loadedMeals)\n//       setIsLoading(false)\n//     }\n\n//      fetchMeals().catch(error => {\n//       setIsLoading(false)\n//       setHttpError(error.message)\n//      }) \n\n//   }, [])\n\n//   if(isLoading) {\n//     return <section className={classes.MealsLoading}>\n//       <p>Loading...</p>\n//     </section>\n//   }\n\n//   if(httpError) {\n//     return <section className={classes.MealsError}>\n//       <p>{httpError}</p>\n//     </section>\n//   }\n\n//   const mealsList = meals.map((meal) => (\n//     <MealItem\n//       id={meal.id}\n//       key={meal.id}\n//       name={meal.name}\n//       description={meal.description}\n//       price={meal.price}\n//     />\n//   ));\n\n//   return (\n//     <section className={classes.meals}>\n//       <Card>\n//         <ul>{mealsList}</ul>\n//       </Card>\n//     </section>\n//   );\n// };\n// export default AvailableMeals;\n\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\n//import MealItem from '../components/Meals/MealItem/MealItem';\nimport { Suspense } from \"react\";\n//import Card from '../components/UI/Card';\n// import classes from './AvailableMeals.module.css';\nimport MealsList from \"../components/Meals/MealsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AvailableMeals() {\n  _s();\n  const data = useLoaderData();\n  const meals = data.meals;\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\",\n        color: \"white\"\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 28\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: meals,\n      children: loadedMeals => /*#__PURE__*/_jsxDEV(MealsList, {\n        meals: loadedMeals\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 8\n  }, this);\n}\n_s(AvailableMeals, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = AvailableMeals;\nexport default _c2 = React.memo(AvailableMeals);\nconst loadMeals = async () => {\n  //you can't use hooks in loader function\n  const response = await fetch(\"http://localhost:8080/api/meals\");\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch meals.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData;\n  }\n};\nexport const loader = () => {\n  return defer({\n    meals: loadMeals()\n  });\n};\nvar _c, _c2;\n$RefreshReg$(_c, \"AvailableMeals\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","Suspense","MealsList","jsxDEV","_jsxDEV","AvailableMeals","_s","data","meals","fallback","style","textAlign","color","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedMeals","_c","_c2","React","memo","loadMeals","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/Rajko Andjic/Desktop/Repository/github/food-order-app/front/src/pages/AvailableMeals.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n\r\n// import classes from \"./AvailableMeals.module.css\";\r\n// import Card from \"../components/UI/Card\";\r\n// import MealItem from \"../components/Meals/MealItem/MealItem\";\r\n\r\n\r\n\r\n// const AvailableMeals = () => {\r\n//   const [meals, setMeals] = useState([])\r\n//   const [isLoading, setIsLoading] = useState(true)\r\n//   const [httpError, setHttpError] = useState()\r\n\r\n//   useEffect(() => {\r\n//     const fetchMeals = async () => {\r\n//       const response = await fetch('http://localhost:8080/api/meals')\r\n      \r\n//       if(!response.ok) {\r\n//         throw new Error('Somethung went wrong!')\r\n//       }\r\n\r\n//       const responseData = await response.json()\r\n\r\n//       const loadedMeals = []\r\n      \r\n//       for(const key in responseData) {\r\n//         loadedMeals.push({\r\n//           id: key,\r\n//           name: responseData[key].name,\r\n//           description: responseData[key].description,\r\n//           price: responseData[key].price\r\n//         })\r\n//       }\r\n\r\n//       setMeals(loadedMeals)\r\n//       setIsLoading(false)\r\n//     }\r\n\r\n//      fetchMeals().catch(error => {\r\n//       setIsLoading(false)\r\n//       setHttpError(error.message)\r\n//      }) \r\n   \r\n//   }, [])\r\n\r\n//   if(isLoading) {\r\n//     return <section className={classes.MealsLoading}>\r\n//       <p>Loading...</p>\r\n//     </section>\r\n//   }\r\n\r\n//   if(httpError) {\r\n//     return <section className={classes.MealsError}>\r\n//       <p>{httpError}</p>\r\n//     </section>\r\n//   }\r\n\r\n//   const mealsList = meals.map((meal) => (\r\n//     <MealItem\r\n//       id={meal.id}\r\n//       key={meal.id}\r\n//       name={meal.name}\r\n//       description={meal.description}\r\n//       price={meal.price}\r\n//     />\r\n//   ));\r\n\r\n//   return (\r\n//     <section className={classes.meals}>\r\n//       <Card>\r\n//         <ul>{mealsList}</ul>\r\n//       </Card>\r\n//     </section>\r\n//   );\r\n// };\r\n// export default AvailableMeals;\r\n\r\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\n//import MealItem from '../components/Meals/MealItem/MealItem';\r\nimport { Suspense } from \"react\";\r\n//import Card from '../components/UI/Card';\r\n// import classes from './AvailableMeals.module.css';\r\nimport MealsList from \"../components/Meals/MealsList\";\r\n\r\nfunction AvailableMeals() {\r\n  const data = useLoaderData();\r\n  const meals = data.meals\r\n\r\n  return (\r\n       <Suspense fallback={<p style={{textAlign: \"center\", color: \"white\"}}>Loading...</p>}>\r\n      <Await resolve={meals}>\r\n        {(loadedMeals) => <MealsList meals={loadedMeals}/>}\r\n  </Await>\r\n    </Suspense>\r\n  )\r\n\r\n}\r\n\r\nexport default React.memo(AvailableMeals);\r\n\r\nconst loadMeals = async() => {\r\n  //you can't use hooks in loader function\r\n  const response = await fetch(\"http://localhost:8080/api/meals\");\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch meals.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    const resData = await response.json()\r\n    return resData\r\n  }\r\n}\r\n\r\nexport const loader = () => {\r\n  return defer( {\r\n    meals: loadMeals()\r\n  })\r\n};\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE;AACA,SAASC,QAAQ,QAAQ,OAAO;AAChC;AACA;AACA,OAAOC,SAAS,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAMC,IAAI,GAAGV,aAAa,EAAE;EAC5B,MAAMW,KAAK,GAAGD,IAAI,CAACC,KAAK;EAExB,oBACKJ,OAAA,CAACH,QAAQ;IAACQ,QAAQ,eAAEL,OAAA;MAAGM,KAAK,EAAE;QAACC,SAAS,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;IAAAJ,QAAA,eACrFT,OAAA,CAACJ,KAAK;MAACkB,OAAO,EAAEV,KAAM;MAAAK,QAAA,EAClBM,WAAW,iBAAKf,OAAA,CAACF,SAAS;QAACM,KAAK,EAAEW;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAChD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACK;AAGf;AAACX,EAAA,CAZQD,cAAc;EAAA,QACRR,aAAa;AAAA;AAAAuB,EAAA,GADnBf,cAAc;AAcvB,eAAAgB,GAAA,GAAeC,KAAK,CAACC,IAAI,CAAClB,cAAc,CAAC;AAEzC,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAW;EAC3B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;EAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM7B,IAAI,CACR;MAAE8B,OAAO,EAAE;IAAyB,CAAC,EACrC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAC3B,IAAI,EAAE;IACrC,OAAOgC,OAAO;EAChB;AACF,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAC1B,OAAOhC,KAAK,CAAE;IACZS,KAAK,EAAEgB,SAAS;EAClB,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAJ,EAAA,EAAAC,GAAA;AAAAW,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAX,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}